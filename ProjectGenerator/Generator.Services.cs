using System.Text;
using System.Xml.Linq;

namespace ProjectGenerator;

public class ServicesGenerator : GeneratorBase
{
    //generates services

    public void Generate(DataModel dm)
    {
        foreach (var cls in dm.Classes.Values.Where(e => e.IsModel))
        {
            var serviceName = $"{cls.Name}Service";
            var repositoryName = $"_{Utils.LowerCaseFirst(cls.Name)}Repository";
            var pkField = cls.PrimaryKeyFields().First();
            var pkFieldVarName = Utils.LowerCaseFirst(pkField.Name);
            var sb = new IndentingStringBuilder();

            sb.AppendLine($"using {dm.OutputNamespace}.Infrastructure;");
            sb.AppendLine($"using {dm.OutputNamespace}.Repositories;");
            sb.AppendLine($"using {dm.OutputNamespace}.Commands;");
            sb.AppendLine($"using {dm.OutputNamespace}.Interfaces;");
            sb.AppendLine($"using {dm.OutputNamespace}.Entities;");
            sb.AppendLine($"using {dm.OutputNamespace}.Models;");
            sb.AppendLine($"using IOTA.Core.Security;");
            

            sb.AppendLine($"namespace {dm.OutputNamespace}.Services;");
            sb.AppendLine();

            sb.AppendLine($"public class {serviceName}: I{serviceName}");
            sb.IncreaseIndent();
            sb.AppendLine($"private readonly I{cls.Name}Repository {repositoryName};");
            sb.AppendLine($"private readonly IUnitOfWork _unitOfWork;");
            sb.AppendLine($"private readonly IUsers _users;");
            sb.AppendLine($"");
            sb.AppendLine($"public {serviceName}(I{cls.Name}Repository {repositoryName.Substring(1)}, IUnitOfWork unitOfWork, IUsers users)");
            sb.IncreaseIndent();
            sb.AppendLine($"{repositoryName} = {repositoryName.Substring(1)};");
            sb.AppendLine($"_unitOfWork = unitOfWork;");
            sb.AppendLine($"_users = users;");
            sb.DecreaseIndent();
            sb.AppendLine($"");

            ///////////////GET
            var paramNames = new List<string>();
            paramNames.AddRange(cls.PrimaryKeyFields().Where(e => e.ControllerFromHeader == null).Select(e => $"{e.TypeName} {Utils.LowerCaseFirst(e.Name)}"));
            paramNames.AddRange(cls.PrimaryKeyFields().Where(e => e.ControllerFromHeader != null).Select(e => $"string {Utils.LowerCaseFirst(e.ControllerFromHeader)}"));
            var inputParameters = string.Join(", ", paramNames);

            paramNames = new List<string>();
            paramNames.AddRange(cls.PrimaryKeyFields().Where(e => e.ControllerFromHeader == null).Select(e => $"{Utils.LowerCaseFirst(e.Name)}"));
            paramNames.AddRange(cls.PrimaryKeyFields().Where(e => e.ControllerFromHeader != null).Select(e => $"TODO_Transform({Utils.LowerCaseFirst(e.ControllerFromHeader)})"));
            var outputParameters = string.Join(", ", paramNames);

            sb.AppendLine($"async Task<{cls.Name}Model> I{serviceName}.Get({inputParameters})");
            sb.IncreaseIndent();
            sb.AppendLine($"var entity = await {repositoryName}.Get({outputParameters});");
            sb.AppendLine($"if (entity == null) throw new NotFoundException(\"{cls.Name} with given name not found\");");
            sb.AppendLine($"var model = new {cls.Name}Model");
            sb.IncreaseIndent();
            foreach (var field in cls.Fields.Where(e => !e.IsOnlyInDb))
            {
                sb.AppendLine($"{field.Name} = entity.{field.Name},");
            }
            sb.DecreaseIndent(";");
            sb.AppendLine($"return model;");
            sb.DecreaseIndent();
            sb.AppendLine();

            ///////////////CREATE

            var autogeneratedPrimaryKey = cls.PrimaryKeyFields().SingleOrDefault(e => e.PrimaryKey.IsAutogenerated);
            var notAutogeneratedPrimaryKeys = cls.PrimaryKeyFields().Where(e => !e.PrimaryKey.IsAutogenerated);
            string returnType = "Task";
            if (autogeneratedPrimaryKey != null)
            {
                returnType = $"Task<{autogeneratedPrimaryKey.TypeName}>";
            }

            sb.AppendLine($"async {returnType} I{serviceName}.Create(Create{cls.Name}Command command)");
            sb.IncreaseIndent();
            sb.AppendLine("//TODO EnsurePermissionAndAccess(...) ");
            if (notAutogeneratedPrimaryKeys.Count() > 0)
            {
                var paramString = string.Join(", ", notAutogeneratedPrimaryKeys.Select(e => $"command.{e.Name}"));
                sb.AppendLine($"var found = await {repositoryName}.Get({paramString});");
                sb.AppendLine($"if (found != null) throw new InvalidStateException(\"{cls.Name} with given primaryKey{(notAutogeneratedPrimaryKeys.Count() > 1 ? "s" : "")} already exists\");");
            }
            sb.AppendLine($"var entity = new {cls.Name}");
            sb.IncreaseIndent();
            foreach (var field in cls.Fields.Where(e => (!e.IsPrimaryKey() || !e.PrimaryKey.IsAutogenerated) && !e.IsOnlyInDb))
            {
                sb.AppendLine($"{field.Name} = command.{field.Name},");
            }
            sb.DecreaseIndent(";");
            sb.AppendLine($"{repositoryName}.Save(entity);");
            sb.AppendLine($"await _unitOfWork.SaveChanges();");
            if (autogeneratedPrimaryKey != null)
            {
                sb.AppendLine($"return entity.{autogeneratedPrimaryKey.Name};");
            }
            sb.DecreaseIndent();
            sb.AppendLine();

            ////////////UPDATE
            sb.AppendLine($"async Task I{serviceName}.Update(Update{cls.Name}Command command)");
            sb.IncreaseIndent();

            paramNames = new List<string>();
            paramNames.AddRange(cls.PrimaryKeyFields().Where(e => e.ControllerFromHeader == null).Select(e => $"command.{e.Name}"));
            paramNames.AddRange(cls.PrimaryKeyFields().Where(e => e.ControllerFromHeader != null).Select(e => $"TODO_Transform(command.{e.ControllerFromHeader})"));
            outputParameters = string.Join(", ", paramNames);

            sb.AppendLine($"var entity = await {repositoryName}.GetForUpdate({outputParameters});");
            sb.AppendLine($"if (entity == null) throw new NotFoundException(\"{cls.Name} with given {pkField.Name} does not exist\");");
            foreach (var field in cls.Fields.Where(e => !e.IsPrimaryKey() && !e.IsOnlyInDb))
            {
                sb.AppendLine($"entity.{field.Name} = command.{field.Name};");
            }
            sb.AppendLine($"await _unitOfWork.SaveChanges();");
            sb.DecreaseIndent();
            sb.AppendLine();

            ////////////////DELETE
            sb.AppendLine($"async Task I{serviceName}.Delete(Delete{cls.Name}Command command)");
            sb.IncreaseIndent();
            sb.AppendLine($"var entity = await {repositoryName}.Get(command.{pkField.Name});");
            sb.AppendLine($"if (entity == null) throw new NotFoundException(\"{cls.Name} with given {pkField.Name} does not exist\");");
            sb.AppendLine($"{repositoryName}.Delete(entity);");
            sb.AppendLine($"await _unitOfWork.SaveChanges();");
            sb.DecreaseIndent();
            sb.AppendLine();
            sb.DecreaseIndent();

            Directory.CreateDirectory($"{dm.BasePath}Services\\Interfaces");
            File.WriteAllText($"{dm.BasePath}Services\\{cls.Name}Service.g.cs", sb.ToString());

            sb = new IndentingStringBuilder();
            sb.AppendLine($"using {dm.OutputNamespace}.Models;");
            sb.AppendLine($"using {dm.OutputNamespace}.Commands;");
            sb.AppendLine();
            sb.AppendLine($"namespace {dm.OutputNamespace}.Services;");
            sb.AppendLine();
            sb.AppendLine($"public interface I{serviceName}");
            sb.IncreaseIndent();
            sb.AppendLine($"Task<{cls.Name}Model> Get({inputParameters});");
            sb.AppendLine($"Task<{pkField.TypeName}> Create(Create{cls.Name}Command command);");
            sb.AppendLine($"Task Update(Update{cls.Name}Command command);");
            sb.AppendLine($"Task Delete(Delete{cls.Name}Command command);");
            sb.DecreaseIndent();
            File.WriteAllText($"{dm.BasePath}Services\\Interfaces\\I{cls.Name}Service.g.cs", sb.ToString());
        }
    }

    public override bool ShouldGenerateField(Field field, string action)
    {
        if (field.IsOnlyInDb) return false;
        if (field.IsReadOnly && action == "updateModel") return false;
        if (field.IsPrimaryKey() && action == "createModel") return false;
        if (field.IsPrimaryKey() && action == "updateModel") return false;
        return true;
    }
}
