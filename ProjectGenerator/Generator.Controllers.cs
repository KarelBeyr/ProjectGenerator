using System.Reflection;
using System.Text;
using System.Xml.Linq;

namespace ProjectGenerator;

public class ControllersGenerator : GeneratorBase
{
    //generates controllers
    public void Generate(DataModel dm)
    {
        foreach (var cls in dm.Classes.Values.Where(e => e.IsModel))
        {
            var serviceName = $"_{Utils.LowerCaseFirst(cls.Name)}Service";
            var controllerIdentificationFields = cls.PrimaryKeyFields().Where(e => e.ControllerFromHeader == null);
            var e404message = $"If invalid {(string.Join(" or ", controllerIdentificationFields.Select(e => $"<paramref name=\"{Utils.LowerCaseFirst(e.Name)}\"/>")))} was passed.";
            var autogeneratedPrimaryKey = cls.PrimaryKeyFields().SingleOrDefault(e => e.PrimaryKey.IsAutogenerated);
            var notAutogeneratedPrimaryKeys = cls.PrimaryKeyFields().Where(e => !e.PrimaryKey.IsAutogenerated && e.ControllerFromHeader == null);
            var restMethodParams = string.Join('/', cls.PrimaryKeyFields().Where(e => !e.PrimaryKey.IsOptional && e.ControllerFromHeader == null).Select(e => $"{{{Utils.LowerCaseFirst(e.Name)}}}"));
            var modelName = $"{cls.Name}Model";

            var sb = new IndentingStringBuilder();

            sb.AppendLine("using Microsoft.AspNetCore.Http;");
            sb.AppendLine("using Microsoft.AspNetCore.Mvc;");
            sb.AppendLine($"using {dm.OutputNamespace}.Entities;");
            sb.AppendLine($"using {dm.OutputNamespace}.Models;");
            sb.AppendLine($"using {dm.OutputNamespace}.Commands;");
            sb.AppendLine($"using {dm.OutputNamespace}.Services;");
            sb.AppendLine();
            sb.AppendLine($"namespace {dm.OutputNamespace}.Controllers;");
            sb.AppendLine();

            GenerateXmlComment("summary", $"{cls.Name} controller", sb);
            sb.AppendLine($"[Route(\"api/[controller]\")]");
            sb.AppendLine($"public class {cls.Name}Controller : Controller");
            sb.IncreaseIndent();
            sb.AppendLine($"private readonly I{cls.Name}Service {serviceName};");
            sb.AppendLine($"");
            GenerateXmlComment("summary", "Creates new instance.", sb);
            sb.AppendLine($"public {cls.Name}Controller(I{cls.Name}Service {serviceName.Substring(1)})");
            sb.IncreaseIndent();
            sb.AppendLine($"{serviceName} = {serviceName.Substring(1)};");
            sb.DecreaseIndent();
            sb.AppendLine($"");

            ///////////////CREATE
            GenerateXmlComment("summary", $"Creates new {cls.Name}", sb);
            GenerateXmlComment("param name=\"request\"", $"Model describing the new {cls.Name}", sb, true);
            var returnName = string.Join(" and ", cls.PrimaryKeyFields().Where(e => e.ControllerFromHeader == null).Select(e => e.Name));
            GenerateXmlComment("returns", $"New {returnName} assigned to new {cls.Name}", sb, true);
            GenerateXmlComment("response code=\"201\"", $"New {returnName} assigned to new {cls.Name}",sb, true);
            GenerateXmlComment("response code=\"400\"", $"If request is wrong", sb, true);
            sb.AppendLine($"[HttpPut]");
            sb.AppendLine($"[ProducesResponseType(typeof(string), StatusCodes.Status201Created)]");
            sb.AppendLine($"[ProducesResponseType(typeof(string), StatusCodes.Status400BadRequest)]");
            sb.AppendLine($"public async Task<ActionResult<string>> Create([FromBody] Create{cls.Name}Model request)   //TODO ActionResult<int>?"); 
            sb.IncreaseIndent();

            var prefix = "";
            if (autogeneratedPrimaryKey != null)
            {
                prefix = "var id = ";
            }
            sb.AppendLine($"{prefix}await {serviceName}.Create(new Create{cls.Name}Command");
            sb.IncreaseIndent();
            foreach (var field in cls.Fields.Where(e => !(e.IsPrimaryKey() && e.PrimaryKey.IsAutogenerated) && !e.IsOnlyInDb && e.ControllerFromHeader == null))
            {
                sb.AppendLine($"{field.Name} = request.{field.Name},");
            }
            var fromHeaders = cls.Fields.Where(e => e.ControllerFromHeader != null);
            foreach (var fromHeader in fromHeaders)
            {
                sb.AppendLine($"{fromHeader.ControllerFromHeader} = Request.Headers[\"{fromHeader.ControllerFromHeader}\"],");
            }
            sb.DecreaseIndent(");");
            var pairs = new List<string>();
            pairs.AddRange(notAutogeneratedPrimaryKeys.Select(e => $"{Utils.LowerCaseFirst(e.Name)} = request.{e.Name}"));
            if (autogeneratedPrimaryKey != null)
            {
                pairs.Add($"{Utils.LowerCaseFirst(autogeneratedPrimaryKey.Name)} = {Utils.LowerCaseFirst(autogeneratedPrimaryKey.Name)}");
            }
            var parameters = string.Join(", ", pairs);
            sb.AppendLine($"return CreatedAtAction(nameof(Get), new {{ {parameters} }}, new {{ {parameters} }});");
            sb.DecreaseIndent();
            sb.AppendLine();

            ///////////////GET
            GenerateXmlComment("summary", $"Gets {cls.Name}", sb);
            foreach (var pk in cls.PrimaryKeyFields().Where(e => e.ControllerFromHeader == null))
            {
                GenerateXmlComment($"param name=\"{Utils.LowerCaseFirst(pk.Name)}\"", $"{pk.Name} of {cls.Name} to get details", sb, true);
            }
            GenerateXmlComment("returns", $"Detail of given {cls.Name}", sb, true);
            GenerateXmlComment("response code=\"200\"", $"Detail of given {cls.Name}", sb, true);
            GenerateXmlComment("response code=\"404\"", e404message, sb, true);
            sb.AppendLine($"[HttpGet(\"{restMethodParams}\")]");
            sb.AppendLine($"[ProducesResponseType(typeof({modelName}), StatusCodes.Status200OK)]");
            sb.AppendLine($"[ProducesResponseType(typeof(string), StatusCodes.Status404NotFound)]");
            var controllerEndpointParameters = string.Join(", ", cls.PrimaryKeyFields().Where(e => e.ControllerFromHeader == null).Select(e => $"[{(e.PrimaryKey.IsOptional ? "FromQuery" : "FromRoute")}] {e.TypeName} {Utils.LowerCaseFirst(e.Name)}"));
            sb.AppendLine($"public async Task<ActionResult<{modelName}>> Get({controllerEndpointParameters})");
            sb.IncreaseIndent();
            var paramNames = new List<string>();
            paramNames.AddRange(cls.PrimaryKeyFields().Where(e => e.ControllerFromHeader == null).Select(e => Utils.LowerCaseFirst(e.Name)));
            paramNames.AddRange(cls.PrimaryKeyFields().Where(e => e.ControllerFromHeader != null).Select(e => $"Request.Headers[\"{e.ControllerFromHeader}\"]"));
            parameters = string.Join(", ", paramNames);
            sb.AppendLine($"var res = await {serviceName}.Get({parameters});");
            sb.AppendLine($"return Ok(res);");
            sb.DecreaseIndent();
            sb.AppendLine();

            ///////////////UPDATE
            GenerateXmlComment("summary", $"Updates {cls.Name}", sb);
            foreach (var pk in cls.PrimaryKeyFields())
            {
                GenerateXmlComment($"param name=\"{Utils.LowerCaseFirst(pk.Name)}\"", $"{pk.Name} of {cls.Name} to be updated", sb, true);
            }

            GenerateXmlComment($"param name=\"request\"", $"Complete new state in the Update{cls.Name}Model", sb, true);
            GenerateXmlComment("response code=\"204\"", $"Update was successful.", sb, true);
            GenerateXmlComment("response code=\"404\"", e404message, sb, true);
            GenerateXmlComment("response code=\"400\"", $"If update cannot be performed, contains reason why.", sb, true);
            sb.AppendLine($"[HttpPatch(\"{restMethodParams}\")]");
            sb.AppendLine($"public async Task<ActionResult> Update({controllerEndpointParameters}, [FromBody] Update{cls.Name}Model request)");
            sb.IncreaseIndent();
            sb.AppendLine($"await {serviceName}.Update(new Update{cls.Name}Command");
            sb.IncreaseIndent();
            foreach (var field in cls.PrimaryKeyFields().Where(e => e.ControllerFromHeader == null))
            {
                sb.AppendLine($"{field.Name} = {Utils.LowerCaseFirst(field.Name)},");
            }
            foreach (var field in cls.Fields.Where(e => !e.IsPrimaryKey() && !e.IsOnlyInDb && !e.IsReadOnly && e.ControllerFromHeader == null))
            {
                sb.AppendLine($"{field.Name} = request.{field.Name},");
            }
            foreach (var fromHeader in fromHeaders)
            {
                sb.AppendLine($"{fromHeader.ControllerFromHeader} = Request.Headers[\"{fromHeader.ControllerFromHeader}\"],");
            }
            sb.DecreaseIndent(");");
            sb.AppendLine($"return NoContent();");
            sb.DecreaseIndent();
            sb.AppendLine();

            ///////////////DELETE
            GenerateXmlComment("summary", $"Deletes {cls.Name}", sb);
            foreach (var pk in cls.PrimaryKeyFields())
            {
                GenerateXmlComment($"param name=\"{Utils.LowerCaseFirst(pk.Name)}\"", $"{pk.Name} of {cls.Name} to be deleted", sb, true);
            }
            GenerateXmlComment("response code=\"204\"", $"Delete was successful.", sb, true);
            GenerateXmlComment("response code=\"404\"", e404message, sb, true);
            sb.AppendLine($"[HttpDelete(\"{restMethodParams}\")]");
            sb.AppendLine($"public async Task<ActionResult> Delete({controllerEndpointParameters})");
            sb.IncreaseIndent();
            sb.AppendLine($"await {serviceName}.Delete(new Delete{cls.Name}Command");
            sb.IncreaseIndent();
            foreach (var field in cls.PrimaryKeyFields().Where(e => e.ControllerFromHeader == null))
            {
                sb.AppendLine($"{field.Name} = {Utils.LowerCaseFirst(field.Name)},");
            }
            sb.DecreaseIndent(");");
            sb.AppendLine($"return NoContent();");
            sb.DecreaseIndent();

            sb.DecreaseIndent();
            Directory.CreateDirectory($"{dm.BasePath}Controllers");
            File.WriteAllText($"{dm.BasePath}Controllers\\{cls.Name}Controller.cs", sb.ToString());
        }
    }

    public override bool ShouldGenerateField(Field field, string action)
    {
        if (field.IsOnlyInDb) return false;
        if (field.IsReadOnly && action == "updateModel") return false;
        if (field.IsPrimaryKey() && action == "createModel") return false;
        if (field.IsPrimaryKey() && action == "updateModel") return false;
        return true;
    }
}
